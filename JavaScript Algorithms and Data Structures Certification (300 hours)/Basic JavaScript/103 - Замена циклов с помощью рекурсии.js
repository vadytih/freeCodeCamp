// Замена циклов с помощью рекурсии
// Рекурсия — это концепция, согласно которой функция может быть выражена через саму себя. Чтобы помочь понять это, начните с размышления о следующей задаче: умножьте первые nэлементы массива, чтобы создать произведение этих элементов. Используя forцикл, вы можете сделать это:
//
//     function multiply(arr, n) {
//         let product = 1;
//         for (let i = 0; i < n; i++) {
//             product *= arr[i];
//         }
//         return product;
//     }
// Однако обратите внимание на то multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]. Это означает, что вы можете переписать multiplyс точки зрения самого себя и вам никогда не понадобится использовать цикл.
//
//     function multiply(arr, n) {
//     if (n <= 0) {
//         return 1;
//     } else {
//         return multiply(arr, n - 1) * arr[n - 1];
//     }
// }
// Рекурсивная версия multiplyломается следующим образом. В базовом случае , где n <= 0, он возвращает 1. Для больших значений nон вызывает сам себя, но с n - 1. Этот вызов функции оценивается таким же образом, вызывая multiplyснова до тех пор, пока n <= 0. В этот момент все функции могут вернуться, и оригинал multiplyвозвращает ответ.
//
//     Примечание. У рекурсивных функций должен быть базовый случай, когда они возвращаются без повторного вызова функции (в этом примере, когда n <= 0), иначе они никогда не смогут завершить выполнение.
//
//     Напишите рекурсивную функцию, sum(arr, n)которая возвращает сумму первых nэлементов массива arr.
//
// sum([1], 0)должен равняться 0.
//
// sum([2, 3, 4], 1)должно равняться 2.
//
// sum([2, 3, 4, 5], 3)должно равняться 9.
//
// Ваш код не должен полагаться на какие-либо циклы ( forили whileфункции более высокого порядка, такие как forEach, map, filterили reduce.).
//
// Вы должны использовать рекурсию, чтобы решить эту проблему.

// ===
// function sum(arr, n) {
//     // Only change code below this line
//
//     // Only change code above this line
// }
// ===

function sum(arr, n) {
    // Only change code below this line
    if (n <= 0) {
        return 0;
    }
    else {
        return sum(arr, n-1) + arr[n-1];
    };
    // Only change code above this line
}